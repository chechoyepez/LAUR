* @ValidationCode : MjotMjM2ODAxMTpDcDEyNTI6MTYzNDc4ODUwMzY1NTpqYXlhY2hhbmQua2F0cmFnYWRkYTo0OjA6MDoxOmZhbHNlOk4vQTpSMTdfU1A1Mi4wOjgxOjcw
* @ValidationInfo : Timestamp         : 21 Oct 2021 09:25:03
* @ValidationInfo : Encoding          : Cp1252
* @ValidationInfo : User Name         : jayachand.katragadda
* @ValidationInfo : Nb tests success  : 4
* @ValidationInfo : Nb tests failure  : 0
* @ValidationInfo : Rating            : N/A
* @ValidationInfo : Coverage          : 70/81 (86.4%)
* @ValidationInfo : Strict flag       : true
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : R17_SP52.0
$PACKAGE AA.Interest
SUBROUTINE AA.CHECK.LINK.RATE.CHANGE(RequestType, ArrangementId, PropertyId, EffectiveDate, LinkRate, LinkDate, LinkRateChange)
*-----------------------------------------------------------------------------
*
**** <region name= Program Description>
*** <desc>Purpose of the sub-routine</desc>
*
** Api to check if there link rate change for a particular date
**
**
*** </region>
*-----------------------------------------------------------------------------
* @class AA.Interest
* @package AA.Interest
* @stereotype subroutine
* @author sivakumark@temenos.com
*-----------------------------------------------------------------------------
*** <region name= Arguments>
*** <desc>Input and out arguments required for the sub-routine</desc>
* Arguments
*
* Input
* @param RequestType            - "LINK.RATE.PARENT" or "LINK.RATE.CHILD"
* @param ArrangementId          - Arrangement for which linked rate is needed
* @param PropertyId             - Property for which change is requested
* @param EffectiveDate          - Date for which rate is needed
*
* Output
*
* @param LinkRate               - Linked Rate for the date ,if no change NULL returned
* @param LinkDate               - Linked Rate date associated  with link rate
* @param LinkRateChange         - Linked Rate date associated  with link rate
*
*** </region>
*-----------------------------------------------------------------------------
*** <region name= Modification History>
*** <desc>Modifications done in the sub-routine</desc>
* Modification History :
*
* 01/04/2015 - Enhancement - 1392093
*              Task -
*
*17/06/2019 - Task   : 3174831
*             Defect : 3166175
*             Routine modified to process the different company arrangement defined in Linked arrangement field.
*
*06/02/20201 - Task   : 3575306
*              Defect : 3564372
*              When Both parent and child property are in same arrangement LinkRate, LinkDate, LinkRateChange should be returned
*              to update the interest accruals record whenever there is a change in parent property
*
* 22/09/20 - Task   : 3984261
*            Defect : 3936821
*            While linking the Interest property of one arrangement to another interest property of the same arrangement during NEW-ARRANGEMENT activity,
*            system does not update the effective rate after running the COB.This would happens only when we define AA Accounts as settlement account.
*
* 21/10/21 - Task   : 4621883
*            Defect : 4601561
*            During MakeDue activity Locate Effective Date in Linked Int date instead of Linked Rate Change(Because Linked Rate change will be removed during cob  and we are locating effective date in Null array)
*** </region>
*-----------------------------------------------------------------------------

*** <region name= Inserts>
*** <desc>Common variables and file inserts</desc>
* Inserts
*-----------------------------------------------------------------------------

    $USING AA.Interest
    $USING AA.Framework
    $USING ST.CompanyCreation
    $USING EB.SystemTables

*** </region>
*-----------------------------------------------------------------------------

*** <region name= Process Logic>
*** <desc>Program Control</desc>

    GOSUB Initialise

    GOSUB Process

RETURN

*** </region>
*-----------------------------------------------------------------------------
*** <region name= Initialise>
*** <desc>Initialise</desc>
Initialise:

    ArrangementRec = ''
    LinkedParent = ''
    LinkedProperty = ''
    LinkDatePos = ''
    RAccrualDetails = ''
    LinkDate = ''
    LinkRateChange =''
    LinkRate = ''
    LinkArrFlag = ""
    CurrentCompany = EB.SystemTables.getIdCompany()  ;* Get the Current company id
    CurrentCompMne = EB.SystemTables.getRCompany(ST.CompanyCreation.Company.EbComMnemonic)  ;* Get the Company Mnemonic

    


RETURN
*** </region>
*-----------------------------------------------------------------------------

*** <region name= Process>
*** <desc>Process</desc>
Process:
    
    GOSUB LoadCompany   ;* Load the linked arr company if the linked arrangement is in different company

    BEGIN CASE
        CASE RequestType EQ "LINK.RATE.CHILD"
            GOSUB GetInterestAccrualsRecord
            GOSUB GetLinkedRate
            IF NOT(LinkRate) THEN
                AA.Interest.GetLinkedInterestRate(ArrangementId, PropertyId, EffectiveDate, LinkRate, RetError)
                LinkDate = EffectiveDate
            END
        CASE RequestType EQ "LINK.RATE.PARENT"
            ArrangementRec = AA.Framework.Arrangement.Read(ArrangementId, RetError)

            LOCATE EffectiveDate IN ArrangementRec<AA.Framework.Arrangement.ArrLinkDate,1> BY 'AR' SETTING LinkDatePos ELSE
                IF LinkDatePos GT 1 THEN
                    LinkDatePos = LinkDatePos - 1
                END
            END
            GOSUB CheckForLinkType
            IF ArrangementRec<AA.Framework.Arrangement.ArrArrangementType,LinkDatePos> EQ "LINK.RATE.PARENT" OR LinkArrFlag THEN
                AA.Interest.GetLinkedInterestRate(ArrangementId, PropertyId, EffectiveDate, EffectiveRate, RetError)
                AA.Interest.GetInterestAccruals("VAL", ArrangementId, PropertyId, "", "", RAccrualDetails, "", "")
                LOCATE EffectiveDate IN RAccrualDetails<AA.Interest.InterestAccruals.IntAccLinkIntDate,1> BY 'AL' SETTING LinkDatePos THEN
                    LinkRate = RAccrualDetails<AA.Interest.InterestAccruals.IntAccLinkIntRate, LinkDatePos>
                    LinkDate = RAccrualDetails<AA.Interest.InterestAccruals.IntAccLinkIntDate, LinkDatePos>
                    LinkRateChange = RAccrualDetails<AA.Interest.InterestAccruals.IntAccLinkRateChange>
                    IF LinkRate NE EffectiveRate THEN
                        LinkRate = EffectiveRate
                        LinkDate = EffectiveDate
                    END
                END ELSE
                    LinkRate = EffectiveRate
                    LinkDate = EffectiveDate
                END
            END
    END CASE
    
    GOSUB RestoreCompany    ;* Restore the original company
    
RETURN

*** </region>
*-----------------------------------------------------------------------------
*** <region name= GetInterestAccrualsRecord>
*** <desc> GetInterestAccrualsRecord</desc>
GetInterestAccrualsRecord:

    AA.Interest.GetInterestAccruals("VAL", ArrangementId, PropertyId, "", "", RAccrualDetails, "", "")

RETURN
*** </region>
*-----------------------------------------------------------------------------
*** <region name= GetLinkedRate>
*** <desc> GetLinkedRate</desc>
GetLinkedRate:

    
    LOCATE EffectiveDate IN RAccrualDetails<AA.Interest.InterestAccruals.IntAccLinkIntDate,1> BY "AR" SETTING LinkRatePos ELSE
        LinkRatePos = LinkRatePos -1
    END
    LinkDate = RAccrualDetails<AA.Interest.InterestAccruals.IntAccLinkIntDate, LinkRatePos>
    LinkRate = RAccrualDetails<AA.Interest.InterestAccruals.IntAccLinkIntRate, LinkRatePos>
    LinkRateChange = RAccrualDetails<AA.Interest.InterestAccruals.IntAccLinkRateChange>

RETURN
*** </region>
*-----------------------------------------------------------------------------
*** <region name= LoadCompany>
*** <desc> Check if the linked arrangement is current company. If not, then load the Linked
** arrangement company</desc>
LoadCompany:

    SaveArrId = ArrangementId       ;* Store the arr id into local variable to restore after the process
    CompMne = ArrangementId['/',2,1]  ;* Get the Company Mnemonic.
    ArrangementId = ArrangementId['/',1,1]  ;* Get the Arrangement id
    IF CompMne AND CurrentCompMne NE CompMne THEN   ;* Check if Linked arrangement if different company. If so, then load the corresponding company
        ST.CompanyCreation.LoadCompany(CompMne)
    END

RETURN
*** </region>
*-----------------------------------------------------------------------------
*** <region name= RestoreCompany>
*** <desc> Restore the Original company, if different company is loaded for processing</desc>
RestoreCompany:
    
    ArrangementId = SaveArrId       ;* Restore the Arr id
    IF CurrentCompany NE EB.SystemTables.getIdCompany() THEN    ;* Restore the original company, if we load the another company to process
        ST.CompanyCreation.LoadCompany(CurrentCompany)
    END
    
RETURN
*** </region>
*-----------------------------------------------------------------------------
*** <region name= Check for link type>
*** <desc> If parent and child property are same then Arrangement type was not updated. In this case we have to check the Link type of Arrangement Record</desc>
CheckForLinkType:

** Whenever there is a change in Parent property change interest activity has to triggered in child arrangement also. In this case, child property linked with parent property in the same arrangement.
** So, Arrangement Type won't be updated in AA.ARRANGEMENT record. Hence Interest accruals of parent property won't be updated with Linked rate related fields whenever there is an change.
** Hence additional flag added to return the LinkRate,LinkDate,LinkRateChange fields.
** We are maintaining the LinkedArrangement in sub values. Hence position has to be located and assigned to LinkedParent and LinkedProperty variable
    
    TotArrCnt = DCOUNT(ArrangementRec<AA.Framework.Arrangement.ArrLinkArrangement,LinkDatePos>,@SM)
    FOR ArrCnt =  1 TO TotArrCnt
        IF ArrangementId EQ ArrangementRec<AA.Framework.Arrangement.ArrLinkArrangement,LinkDatePos,ArrCnt>['/',1,1] THEN
            IF NOT(ArrangementRec<AA.Framework.Arrangement.ArrArrangementType,LinkDatePos,ArrCnt>) AND ArrangementRec<AA.Framework.Arrangement.ArrLinkType,LinkDatePos,ArrCnt> EQ "LINK.RATE.PARENT" THEN
                LinkArrFlag = "1"
            END
        END
    NEXT ArrCnt

    
RETURN
*** </region>
*-----------------------------------------------------------------------------
END